{
module IfTest.Lexer

open Microsoft.FSharp.Collections
open QuickGraph.FST.GraphBasedFst
open QuickGraph.FSA.GraphBasedFsa
open YC.FST.AbstractLexing.Interpreter
open AbstractAnalysis.Common
open IfTest.Parser
open System.Collections.Generic
//open YC.SDK.CommonInterfaces
}

let whitespace = [' ' '\t' '\r' '\n']

rule token = parse
| whitespace { None }
| '{' { L_left_figure_bracket_(gr) |> Some }
| '}' { L_right_figure_bracket_(gr) |> Some }
| 'A' { A(gr) |> Some }
| 'a' { A(gr) |> Some }
| 'B' { B(gr) |> Some }
| 'b' { B(gr) |> Some }
| 'C' { C(gr) |> Some }
| 'c' { C(gr) |> Some }
| 'D' { D(gr) |> Some }
| 'd' { D(gr) |> Some }
| 'E' { E(gr) |> Some }
| 'e' { E(gr) |> Some }
| 'F' { F(gr) |> Some }
| 'f' { F(gr) |> Some }
| 'G' { G(gr) |> Some }
| 'g' { G(gr) |> Some }
| 'H' { H(gr) |> Some }
| 'h' { H(gr) |> Some }
| ';' { SEMICOLON(gr) |> Some }
| "IF" { IF(gr) |> Some }
| "THEN" { THEN(gr) |> Some }
| "ELSE" { ELSE(gr) |> Some }
