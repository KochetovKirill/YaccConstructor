%start s
%type <string> s
%%

global:
| declaration                           { $1 }
| function_def                          { $1 }
/*(* Some C header files ar shared with the C++ compiler and have linkage
  * specification *)*/
| EXTERN string_constant declaration    { LINKAGE (fst $2,
(*handleLoc*) (snd $2), [ $3 ]) }
| EXTERN string_constant LBRACE globals RBRACE
                                       { LINKAGE (fst $2,
(*handleLoc*) (snd $2), $4)  }
| ASM LPAREN string_constant RPAREN SEMICOLON
                                       { GLOBASM (fst $3, (*handleLoc*) $1) }
| pragma                                { $1 }
/* (* Old-style function prototype. This should be somewhere else, like in
   * "declaration". For now we keep it at global scope only because in local
   * scope it looks too much like a function call  *) */
| IDENT LPAREN old_parameter_list_ne RPAREN old_pardef_list SEMICOLON
                          { (* Convert pardecl to new style *)
                            let pardecl, isva = doOldParDecl $3 $5 in
                            (* Make the function declarator *)
                            doDeclaration ((*handleLoc*) (snd $1)) []
                              [((fst $1, PROTO(JUSTBASE,
pardecl,isva), [], cabslu),
                                NO_INIT)]
                           }
/* (* Old style function prototype, but without any arguments *) */
| IDENT LPAREN RPAREN  SEMICOLON
                          { (* Make the function declarator *)
                            doDeclaration ((*handleLoc*)(snd $1)) []
                              [((fst $1, PROTO(JUSTBASE,[],false), [], cabslu),
                                NO_INIT)]
                           }
/* transformer for a toplevel construct */
| AT_TRANSFORM LBRACE global RBRACE  IDENT/*to*/  LBRACE globals RBRACE {
   checkConnective(fst $5);
   TRANSFORMER($3, $7, $1)
 }
/* transformer for an expression */
| AT_TRANSFORMEXPR LBRACE expression RBRACE  IDENT/*to*/  LBRACE
expression RBRACE {
   checkConnective(fst $5);
   EXPRTRANSFORMER(fst $3, fst $7, $1)
 }
| location error SEMICOLON { PRAGMA (VARIABLE "parse_error", $1) }
;