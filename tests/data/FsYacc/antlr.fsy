%{

open Yard.Core.IL.Production

(* Run with fsyacc.exe --module Yard.Frontends.AntlrFrontend.Parser --open Yard.Core.IL Parser.fsy *)


(*
Expr: ID { Val($1) }
     | INT {  Int($1)  }
     | FLOAT {  Float($1)  }
     | DECR LPAREN Expr RPAREN {  Decr($3)  }


 Stmt: ID ASSIGN Expr { Assign($1,$3) }
     | WHILE Expr DO Stmt { While($2,$4) }
     | BEGIN StmtList END { Seq(List.rev($2)) }
     | IF Expr THEN Stmt { IfThen($2,$4) }
     | IF Expr THEN Stmt ELSE Stmt { IfThenElse($2,$4,$6) }
     | PRINT Expr { Print($2) }


 StmtList: Stmt { [$1] }
        | StmtList SEMI Stmt { $3 :: $1  }

*)

let makeModifiedRule innerProduction modifier =
    match modifier with
    | "+" -> PSome(innerProduction)
    | "*" -> PMany(innerProduction)
    | "?" -> POpt(innerProduction)
    | "!" -> innerProduction // Not included in AST
    | "" -> innerProduction

let makePSeq (productionList, actionCode) =
    PSeq( List.map (fun prod -> {omit = false; rule = prod; binding = None; checker = None;}) productionList , actionCode )

let termCount = ref 0
let generateNewName =
    termCount := !termCount + 1
    sprintf "TERMINAL_%i" !termCount 
let terminals = new System.Collections.Generic.Dictionary<string, string>()
let makeToken (identifier, pos) descr =
    let newName = if identifier="" then generateNewName else identifier
    terminals.[newName] <- descr
    PToken(identifier, pos)
        
%}

%token <Source.t> MULTILINE_COMMENT
%token <Source.t> SINGLELINE_COMMENT
%token <Source.t> CAT_CODE
%token <Source.t> ACTION_NAME
%token <Source.t> ACTION_CODE
%token EOF
%token T_GRAMMAR
%token T_OPTIONS
%token T_FRAGMENT
%token T_SCOPE
%token <Source.t> IDENTIFIER
%token <Source.t> LITERAL
%token <Source.t> TERMINAL
%token LPAREN 
%token RPAREN
%token BAR
%token EQUAL
%token STAR
%token PLUS
%token COLON
%token SEMICOLON
%token QUESTION
%token EXCLAMATION
%token TILDE
%token DOUBLE_DOT
%token HENCE

%start ParseAntlr
%type <(Source.t, Source.t)Grammar.t * (string, string)System.Collections.Generic.Dictionary> ParseAntlr


%%

//file: GrammarDeclaration Options GlobalScope Header Members Rules { Prog() }

ParseAntlr: GrammarName TopLevelDefs EOF { (($2), terminals)  }

GrammarName: T_GRAMMAR TERMINAL SEMICOLON { }
    | T_GRAMMAR IDENTIFIER SEMICOLON { }
    | { }

TopLevelDefs: TopLevelDef { $1 }
    | TopLevelDefs TopLevelDef { $1 @ $2 }

TopLevelDef: Rule { [$1] }
    | TerminalRule { [] }
    | T_OPTIONS ACTION_CODE { [] }
    | T_SCOPE TERMINAL ACTION_CODE { [] }
    | CAT_CODE ActionNameOpt ACTION_CODE { [] }

ActionNameOpt: ACTION_NAME { }
    | { }
    
Rule: IDENTIFIER OptionsOpt ScopeOpt CatOpt COLON RuleBody SEMICOLON { { new Rule.t<Source.t, Source.t> with name = fst($1) and args = [] and body = $6 and _public = false and metaArgs = [] } }

ScopeOpt: T_SCOPE TERMINAL SEMICOLON { }
    | { }

CatOpt: CAT_CODE ACTION_CODE { }
    | { }

TerminalRule: FragmentOpt TERMINAL OptionsOpt COLON RuleString SEMICOLON { makeToken ($2) (List.fold (fun acc elem -> acc+" "+elem) "" ($5)); }

FragmentOpt: T_FRAGMENT { }
    | { }

OptionsOpt: T_OPTIONS ACTION_CODE { }
    | { }

RuleBody: Alt { makePSeq ($1, None) } | RuleBody BAR Alt { PAlt($1, makePSeq ($3, None)) }

Alt: Seq ActionCodeOpt { [$1] } | Seq Alt { $1 :: $2 }

ActionCodeOpt: { None }
    | ACTION_CODE { Some($1) }

Seq: LPAREN RuleBody RPAREN Modifier { makeModifiedRule $2 $4 }
    | BodyOptionsOpt PredicateOpt SimpleProduction Modifier { makeModifiedRule ($3) $4 }

BodyOptionsOpt: T_OPTIONS ACTION_CODE COLON { }
    | { }

PredicateOpt: LPAREN RuleBody RPAREN HENCE { }
    | { }

Modifier: PLUS { "+" }
    | STAR { "*" }
    | QUESTION { "?" }
    | EXCLAMATION { "!" }
    | { "" }

SimpleProduction: IDENTIFIER { PRef($1, None) }
    | LITERAL DOUBLE_DOT LITERAL { 
        match (($1), ($3)) with
        | (("0",_), ("9", _)) -> makeToken ("NUMBER", (0,0)) "'0'..'9'"
        | (("\\0",_), ("\\255", _)) -> makeToken ("CHAR", (0,0))  "'\\0'..'\\255'"
        | (("a",_), ("z", _)) -> makeToken ("LOWER_LATIN", (0,0)) "'a'..'z'"
        | (("A",_), ("Z", _)) -> makeToken ("UPPER_LATIN", (0,0)) "'A'..'Z'"
        | ((a,_), (b, _)) -> makeToken ("", (0,0)) (a+".."+b)
        }
    | LITERAL { PLiteral($1) }
    | TERMINAL { PToken($1) }


RuleString : RulePart { [$1] }
    | RulePart RuleString  { $1 :: $2 }

RulePart: 
  DOUBLE_DOT { ".." }
  | TILDE { "~" }
  | QUESTION {"?" }
  | EXCLAMATION { "!" }
  | PLUS { "+" }
  | STAR { "*" }
  | EQUAL { "=" }
  | BAR { "|" }
  | RPAREN { ")" }
  | LPAREN { "(" }
  | LITERAL { fst($1) }
  | IDENTIFIER { fst($1) }
  | TERMINAL { fst($1) }
  | ACTION_CODE { "{"+fst($1)+"}" }
  | ACTION_NAME { fst($1) }
  | CAT_CODE { fst($1) }
  | T_OPTIONS { "options" }
  | COLON { ":" }
  | HENCE { "=>" }