[<Start>]
file                        : (moduleDef)*;
moduleDef                   : name EQ module;
name                        : STRING_LITERAL;
module                      : moduleHeader (attribute DELIMITER)* (moduleBody)? DOT;
moduleHeader                : KEYWORD_MODULE BRACKET_ROUND_OPEN moduleParams BRACKET_ROUND_CLOSE;
moduleParams                : (name (COMMA name)*)?;
attribute                   : BRACKET_SQUARE_OPEN attributeInner BRACKET_SQUARE_CLOSE;
attributeInner              : attribute_foreign | attribute_interface;
attribute_foreign           : KEYWORD_FOREIGN (attribute_foreignEntry DELIMITER)*;
attribute_foreignEntry      : (KEYWORD_LANGUAGE EQ STRING)
                            | (KEYWORD_FILENAME EQ STRING);
attribute_interface         : KEYWORD_INTERFACE (attribute_interfaceEntry DELIMITER)*;
attribute_interfaceEntry    : (KEYWORD_IN EQ fieldList)
                            | (KEYWORD_OUT EQ fieldList);
fieldList                   : BRACKET_SQUARE_OPEN (name (COMMA name)*)? BRACKET_SQUARE_CLOSE;
moduleBody                  : BRACKET_CURLY_OPEN (statement DELIMITER)* BRACKET_CURLY_CLOSE;
statement                   : fieldDef | fieldAssign | fieldBind;
fieldDef                    : type name (assign | bind)?;
assign                      : EQ expression;
bind                        : BIND expression;
type                        : KEYWORD_INT;
fieldAssign                 : name assign;
fieldBind                   : name bind;

expression                  : expression1 ((PLUS | SUB) expression1)*;
expression1                 : expression2 ((MULT | DIV) expression2)*;
expression2                 : value
                            | name
                            | apply
                            | module
                            | (BRACKET_ROUND_OPEN expression BRACKET_ROUND_CLOSE);
value                       : NUMBER;
apply                       : name BRACKET_ROUND_OPEN (expression ,(COMMA expression)*)? BRACKET_ROUND_CLOSE;
