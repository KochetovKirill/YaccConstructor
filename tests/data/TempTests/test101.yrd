{
  (*IF-OCAML*)  
    let find_assoc = List.assoc 
  (*ENDIF-OCAML*)
  (*F#
let find_assoc key list = snd <| List.find (fst >> (=) key) list
   F#*)

}

binExpr<<operand binOp>>[list]
: l=operand[list] r=(binOp operand[list])* {List.fold (fun l (op,r) -> op l r) l r };

termOp: '+' {( +. )} | '-' { ( -. ) } ;

factorOp: MULT {( *. )} | DIV { ( /. ) } ;

powOp: POW { ( ** ) } ;

powExpr[list]: n=NUMBER { float n } 
 | s=VAR { find_assoc s list } 
 | -LEFT exprCalc[list] -RIGHT;

factor[list]: binExpr<<powExpr powOp>>[list];
                                                      
term[list]: binExpr<<factor factorOp>>[list];

exprCalc[list]: binExpr<<term termOp>>[list];

definition[list]: VAR -EQUAL exprCalc[list] ;

definitionList[list]: -l=definition[list] definitionList[(l::list)] | { list } ;

+expr: -list=definitionList[ [] ] exprCalc[list];