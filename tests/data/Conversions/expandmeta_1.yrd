{
(*
-g YardPrinter  -c ExpandMeta -i ../../../../Tests/Conversions/expandmeta_1.yrd
Ошибки:
1. Повторяются правила yard_option_1:, yard_list_2:,...
2. Генерятся атрибуты для yard_option_6, хотя в месте вызова значение не используется. 
   Это ломает fsyacc, потому что лексер не возвращает значение для токена DOUBLE_PERC 
3. PToken(HEAD) заменяется на PRef(HEAD)

*)
open Yard.Core.IL
open Yard.Core.IL.Production
}

yardOption<<item>>: 
      <yard_item> = item { Some yard_item }
    | empty { None };

yard_nlist<<item>>: 
      <yard_h> = item { [yard_h] }
    | <yard_h> = item <yard_t> = yard_nlist<<item>> { yard_h::yard_t };

yard_list<<item>>: 
      empty { [] }
    | <yard_h> = item <yard_t> = yard_list<<item>> { yard_h::yard_t };

+s:  h = yardOption<<HEAD>> tokens = yard_list<<token>> yard_list<<assoc>> st =
    start yard_nlist<<typedef>> DOUBLE_PERC rules = yard_list<<rule>>
    yardOption<<DOUBLE_PERC>> { h, List.concat tokens, st, rules };

token:  TOKEN_KW yardOption<<TYPE>> tokens = yard_nlist<<IDENT>> { tokens };

assoc:  ASSOC_KW yard_nlist<<IDENT>>;

start:  START_KW name = yard_nlist<<IDENT>> { name };

typedef:  TYPE_KW TYPE yard_nlist<<IDENT>>;

yard_item_1[alt name]:  BAR alt = alternative {alt};

rule:  name = IDENT COLON yardOption<<BAR>> alt = alternative <opt_alts> =
    yard_list<<yard_item_1>>[alt name]
    { { new Rule.t<Source.t, Source.t> with 
            name=name 
            and args=[] 
            and body=if opt_alts=[] then alt else PAlt(alt, List.reduce (fun acc prod -> PAlt(acc, prod)) opt_alts)
            and _public=false
            and metaArgs=[] } }
    ;

yard_item_2:  s = IDENT { PRef((s,(0,0)), None) };

alternative:  lst = yard_list<<yard_item_2>> ac = ACTION_CODE
    { PSeq(List.map (fun prod -> {new Production.elem<Source.t, Source.t> with omit=false and rule=prod and binding=None and checker=None}) lst, Some(ac,(0,0))) }
    ;
