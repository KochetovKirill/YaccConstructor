{
(*
-g YardPrinter  -c ExpandEbnf -i ../../../../Tests/Conversions/expandebnf_1.yrd
*)
open Yard.Core.IL
open Yard.Core.IL.Production
}

[<Start>]
s:  h=HEAD? tokens=token* assoc* st=start typedef+ DOUBLE_PERC rules=rule* DOUBLE_PERC? 
    { h, List.concat tokens, st, rules }   ;

token: TOKEN_KW TYPE? tokens=IDENT+ { tokens };

assoc: ASSOC_KW IDENT+ ; 

start: START_KW name=IDENT+ { name };

typedef: TYPE_KW TYPE IDENT+ ;

rule: name=IDENT COLON BAR? alt=alternative opt_alts=(BAR alt=alternative {alt})* 
    { { new Rule.t<Source.t, Source.t> with 
            name=name 
            and args=[] 
            and body=if opt_alts=[] then alt else PAlt(alt, List.reduce (fun acc prod -> PAlt(acc, prod)) opt_alts)
            and _public=false
            and metaArgs=[] } } ;

alternative: lst=(s=IDENT { PRef((s,(0,0)), None) })*  ac=ACTION_CODE 
    { PSeq(List.map (fun prod -> {new Production.elem<Source.t, Source.t> with omit=false and rule=prod and binding=None and checker=None}) lst, Some(ac,(0,0))) } ;
