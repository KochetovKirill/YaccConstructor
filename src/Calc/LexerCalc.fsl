{
module Calc.Lexer
open Calc.AbstractParser
open AbstractLexer.Core
open YC.SDK.CommonInterfaces
}

let digit = ['0'-'9']
let whitespace = [' ' '\t' '\r' '\n']

rule token = parse
| whitespace { None }
| ['-']? digit+ ('.'digit+)? (['e' 'E'] digit+)? { NUMBER(lexeme,brs) |> Some }
| '-' { MINUS(lexeme,brs) |> Some }
| '(' { LBRACE(lexeme,brs) |> Some }
| ')' { RBRACE(lexeme,brs)|> Some  }
| '/' { DIV(lexeme,brs) |> Some }
| '+' { PLUS(lexeme,brs) |> Some }
| "**" { POW(lexeme,brs) |> Some }
| '*' { MULT(lexeme,brs) |> Some }
| eof { RNGLR_EOF ("",[||]) |> Some }
| _ { raise (LexerError(lexeme,box brs)) (* failwithf "unexpected input: %s" <| string lexeme*) }
