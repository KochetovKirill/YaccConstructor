/// Implementation file for parser generated by the fsyacc-compatibility backend for fsharpyacc.
module internal Parser

#nowarn "64" // turn off warnings that type variables used in production annotations are instantiated to concrete type

open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers

// This type is the type of tokens accepted by the parser
type token =
    | DIV of (int)
    | EOF of (int)
    | EQ of (int)
    | ID of (int)
    | INT of (int)
    | LBRACE of (int)
    | MINUS of (int)
    | MULT of (int)
    | PLUS of (int)
    | RBRACE of (int)
    | TZ of (int)

/// This type is used to give symbolic names to token indexes, useful for error messages.
type private tokenId =
    | TOKEN_DIV
    | TOKEN_EOF
    | TOKEN_EQ
    | TOKEN_ID
    | TOKEN_INT
    | TOKEN_LBRACE
    | TOKEN_MINUS
    | TOKEN_MULT
    | TOKEN_PLUS
    | TOKEN_RBRACE
    | TOKEN_TZ
    | TOKEN_end_of_input
    | TOKEN_error

/// This type is used to give symbolic names to token indexes, useful for error messages.
type private nonterminalId =
    | NONTERM__startcalc
    | NONTERM_atom
    | NONTERM_calc
    | NONTERM_expr
    | NONTERM_multExpression
    | NONTERM_statement
    | NONTERM_statementList

/// Maps tokens to integer indexes.
let private tagOfToken = function
    | DIV _ -> 0
    | EOF _ -> 1
    | EQ _ -> 2
    | ID _ -> 3
    | INT _ -> 4
    | LBRACE _ -> 5
    | MINUS _ -> 6
    | MULT _ -> 7
    | PLUS _ -> 8
    | RBRACE _ -> 9
    | TZ _ -> 10

/// Maps integer indices to symbolic token ids.
let private tokenTagToTokenId = function
    | 0 -> TOKEN_DIV
    | 1 -> TOKEN_EOF
    | 2 -> TOKEN_EQ
    | 3 -> TOKEN_ID
    | 4 -> TOKEN_INT
    | 5 -> TOKEN_LBRACE
    | 6 -> TOKEN_MINUS
    | 7 -> TOKEN_MULT
    | 8 -> TOKEN_PLUS
    | 9 -> TOKEN_RBRACE
    | 10 -> TOKEN_TZ
    | 12 -> TOKEN_end_of_input
    | 11 -> TOKEN_error
    | tokenIdx ->
        failwithf "tokenTagToTokenId: Invalid token. (Tag = %i)" tokenIdx

/// Maps production indexes returned in syntax errors to strings representing
/// the non-terminal that would be produced by that production.
let private prodIdxToNonTerminal = function
    | 0 -> NONTERM__startcalc
    | 1 -> NONTERM_atom
    | 2 -> NONTERM_atom
    | 3 -> NONTERM_atom
    | 4 -> NONTERM_calc
    | 5 -> NONTERM_expr
    | 6 -> NONTERM_expr
    | 7 -> NONTERM_expr
    | 8 -> NONTERM_multExpression
    | 9 -> NONTERM_multExpression
    | 10 -> NONTERM_multExpression
    | 11 -> NONTERM_statement
    | 12 -> NONTERM_statement
    | 13 -> NONTERM_statementList
    | 14 -> NONTERM_statementList
    | prodIdx ->
        failwithf "prodIdxToNonTerminal: Invalid production index. (Index = %i)" prodIdx

let [<Literal>] private _fsyacc_endOfInputTag = 12
let [<Literal>] private _fsyacc_tagOfErrorTerminal = 11

/// Gets the name of a token as a string.
let token_to_string = function
    | DIV _ -> "DIV"
    | EOF _ -> "EOF"
    | EQ _ -> "EQ"
    | ID _ -> "ID"
    | INT _ -> "INT"
    | LBRACE _ -> "LBRACE"
    | MINUS _ -> "MINUS"
    | MULT _ -> "MULT"
    | PLUS _ -> "PLUS"
    | RBRACE _ -> "RBRACE"
    | TZ _ -> "TZ"

/// Gets the data carried by a token as an object.
let private _fsyacc_dataOfToken = function
    | DIV _fsyacc_x -> box _fsyacc_x
    | EOF _fsyacc_x -> box _fsyacc_x
    | EQ _fsyacc_x -> box _fsyacc_x
    | ID _fsyacc_x -> box _fsyacc_x
    | INT _fsyacc_x -> box _fsyacc_x
    | LBRACE _fsyacc_x -> box _fsyacc_x
    | MINUS _fsyacc_x -> box _fsyacc_x
    | MULT _fsyacc_x -> box _fsyacc_x
    | PLUS _fsyacc_x -> box _fsyacc_x
    | RBRACE _fsyacc_x -> box _fsyacc_x
    | TZ _fsyacc_x -> box _fsyacc_x

let private _fsyacc_gotos = [| 0us; 65535us; 8us; 65535us; 0us; 7us; 4us; 7us; 10us; 7us; 14us; 7us; 15us; 7us; 16us; 23us; 17us; 24us; 18us; 7us; 1us; 65535us; 0us; 1us; 4us; 65535us; 0us; 8us; 4us; 12us; 10us; 19us; 18us; 8us; 6us; 65535us; 0us; 6us; 4us; 6us; 10us; 6us; 14us; 21us; 15us; 22us; 18us; 6us; 2us; 65535us; 0us; 9us; 18us; 9us; 2us; 65535us; 0us; 5us; 18us; 25us; |]
let private _fsyacc_sparseGotoTableRowOffsets = [| 0us; 1us; 10us; 12us; 17us; 24us; 27us; |]
let private _fsyacc_stateToProdIdxsTableElements = [| 15us; 0us; 1us; 2us; 3us; 4us; 7us; 6us; 5us; 10us; 9us; 8us; 11us; 12us; 14us; 13us; 1us; 0us; 2us; 1us; 12us; 1us; 2us; 10us; 1us; 2us; 3us; 3us; 7us; 6us; 5us; 10us; 9us; 8us; 1us; 4us; 3us; 7us; 6us; 5us; 3us; 10us; 9us; 8us; 1us; 11us; 2us; 14us; 13us; 10us; 1us; 2us; 3us; 7us; 6us; 5us; 10us; 9us; 8us; 12us; 1us; 1us; 1us; 3us; 1us; 4us; 7us; 1us; 2us; 3us; 6us; 10us; 9us; 8us; 7us; 1us; 2us; 3us; 5us; 10us; 9us; 8us; 4us; 1us; 2us; 3us; 9us; 4us; 1us; 2us; 3us; 8us; 15us; 1us; 2us; 3us; 7us; 6us; 5us; 10us; 9us; 8us; 11us; 12us; 14us; 14us; 13us; 13us; 1us; 12us; 1us; 3us; 1us; 6us; 1us; 5us; 1us; 9us; 1us; 8us; 1us; 13us; |]
let private _fsyacc_stateToProdIdxsTableRowOffsets = [| 0us; 16us; 18us; 21us; 23us; 34us; 36us; 40us; 44us; 46us; 49us; 60us; 62us; 64us; 66us; 74us; 82us; 87us; 92us; 108us; 110us; 112us; 114us; 116us; 118us; 120us; |]
let [<Literal>] private _fsyacc_action_rows = 26
let private _fsyacc_actionTableElements = [| 3us; 32768us; 3us; 2us; 4us; 3us; 5us; 4us; 1us; 32768us; 12us; 49152us; 7us; 32768us; 0us; 16385us; 2us; 10us; 6us; 16385us; 7us; 16385us; 8us; 16385us; 9us; 16385us; 10us; 16385us; 6us; 32768us; 0us; 16386us; 6us; 16386us; 7us; 16386us; 8us; 16386us; 9us; 16386us; 10us; 16386us; 3us; 32768us; 3us; 11us; 4us; 3us; 5us; 4us; 1us; 32768us; 1us; 13us; 4us; 32768us; 6us; 14us; 8us; 15us; 9us; 16391us; 10us; 16391us; 6us; 32768us; 0us; 16us; 6us; 16394us; 7us; 17us; 8us; 16394us; 9us; 16394us; 10us; 16394us; 1us; 32768us; 10us; 16395us; 1us; 32768us; 10us; 18us; 3us; 32768us; 3us; 11us; 4us; 3us; 5us; 4us; 6us; 32768us; 0us; 16385us; 6us; 16385us; 7us; 16385us; 8us; 16385us; 9us; 16385us; 10us; 16385us; 1us; 32768us; 9us; 20us; 1us; 32768us; 12us; 16388us; 3us; 32768us; 3us; 11us; 4us; 3us; 5us; 4us; 3us; 32768us; 3us; 11us; 4us; 3us; 5us; 4us; 3us; 32768us; 3us; 11us; 4us; 3us; 5us; 4us; 3us; 32768us; 3us; 11us; 4us; 3us; 5us; 4us; 4us; 32768us; 1us; 16398us; 3us; 2us; 4us; 3us; 5us; 4us; 1us; 32768us; 10us; 16396us; 6us; 32768us; 0us; 16387us; 6us; 16387us; 7us; 16387us; 8us; 16387us; 9us; 16387us; 10us; 16387us; 2us; 32768us; 9us; 16390us; 10us; 16390us; 2us; 32768us; 9us; 16389us; 10us; 16389us; 4us; 32768us; 6us; 16393us; 8us; 16393us; 9us; 16393us; 10us; 16393us; 4us; 32768us; 6us; 16392us; 8us; 16392us; 9us; 16392us; 10us; 16392us; 1us; 32768us; 1us; 16397us; |]
let private _fsyacc_actionTableRowOffsets = [| 0us; 4us; 6us; 14us; 21us; 25us; 27us; 32us; 39us; 41us; 43us; 47us; 54us; 56us; 58us; 62us; 66us; 70us; 74us; 79us; 81us; 88us; 91us; 94us; 99us; 104us; |]
let private _fsyacc_reductionSymbolCounts = [| 1us; 1us; 1us; 3us; 2us; 3us; 3us; 1us; 3us; 3us; 1us; 1us; 3us; 3us; 2us; |]
let private _fsyacc_productionToNonTerminalTable = [| 0us; 1us; 1us; 1us; 2us; 3us; 3us; 3us; 4us; 4us; 4us; 5us; 5us; 6us; 6us; |]
let private _fsyacc_immediateActions = [| 65535us; 49152us; 65535us; 16386us; 65535us; 65535us; 65535us; 65535us; 16395us; 65535us; 65535us; 16385us; 65535us; 16388us; 65535us; 65535us; 65535us; 65535us; 65535us; 16396us; 16387us; 16390us; 16389us; 16393us; 16392us; 16397us; |]
let private _fsyacc_reductions () = [|
    (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
        let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : _)) in
        Microsoft.FSharp.Core.Operators.box
            (
                (
                    raise (Microsoft.FSharp.Text.Parsing.Accept (Microsoft.FSharp.Core.Operators.box _1))
                )
            : '_startcalc))
    (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
        let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
        Microsoft.FSharp.Core.Operators.box
            (
                (
                    _1 
                )
            : 'atom))
    (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
        let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
        Microsoft.FSharp.Core.Operators.box
            (
                (
                    _1 
                )
            : 'atom))
    (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
        let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
        let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
        let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
        Microsoft.FSharp.Core.Operators.box
            (
                (
                    _2 
                )
            : 'atom))
    (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
        let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'statementList)) in
        let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
        Microsoft.FSharp.Core.Operators.box
            (
                (
                    _1 
                )
            : _))
    (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
        let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'multExpression)) in
        let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
        let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'multExpression)) in
        Microsoft.FSharp.Core.Operators.box
            (
                (
                    _1 + _3 
                )
            : 'expr))
    (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
        let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'multExpression)) in
        let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
        let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'multExpression)) in
        Microsoft.FSharp.Core.Operators.box
            (
                (
                    _1 - _3 
                )
            : 'expr))
    (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
        let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'multExpression)) in
        Microsoft.FSharp.Core.Operators.box
            (
                (
                    _1
                )
            : 'expr))
    (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
        let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'atom)) in
        let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
        let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'atom)) in
        Microsoft.FSharp.Core.Operators.box
            (
                (
                    _1 * _3 
                )
            : 'multExpression))
    (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
        let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'atom)) in
        let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
        let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'atom)) in
        Microsoft.FSharp.Core.Operators.box
            (
                (
                    _1 / _3 
                )
            : 'multExpression))
    (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
        let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'atom)) in
        Microsoft.FSharp.Core.Operators.box
            (
                (
                    _1
                )
            : 'multExpression))
    (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
        let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
        Microsoft.FSharp.Core.Operators.box
            (
                (
                    _1 
                )
            : 'statement))
    (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
        let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
        let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
        let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
        Microsoft.FSharp.Core.Operators.box
            (
                (
                    _3 
                )
            : 'statement))
    (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
        let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'statement)) in
        let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
        let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'statementList)) in
        Microsoft.FSharp.Core.Operators.box
            (
                (
                    _1::_3 
                )
            : 'statementList))
    (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
        let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'statement)) in
        let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
        Microsoft.FSharp.Core.Operators.box
            (
                (
                    [_1] 
                )
            : 'statementList))
    |]

let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = {
    reductions = _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken;
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError =
        (fun (ctxt : Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) ->
            match parse_error_rich with
            | Some f -> f ctxt
            | None -> parse_error ctxt.Message);
    numTerminals = 13;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable;
    }
    
let engine lexer lexbuf startState =
    (tables ()).Interpret(lexer, lexbuf, startState)

let calc lexer lexbuf : _ =
    unbox ((tables ()).Interpret(lexer, lexbuf, 0))

