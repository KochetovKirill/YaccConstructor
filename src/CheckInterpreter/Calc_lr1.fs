/// Implementation file for parser generated by the fsyacc-compatibility backend for fsharpyacc.
module ParserCalcLR1

#nowarn "64" // turn off warnings that type variables used in production annotations are instantiated to concrete type

open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers

// This type is the type of tokens accepted by the parser
type token =
    | DIV of (int)
    | EOF of (int)
    | EQ of (int)
    | ID of (int)
    | INT of (int)
    | LBRACE of (int)
    | MINUS of (int)
    | MULT of (int)
    | PLUS of (int)
    | RBRACE of (int)
    | TZ of (int)

/// This type is used to give symbolic names to token indexes, useful for error messages.
type private tokenId =
    | TOKEN_DIV
    | TOKEN_EOF
    | TOKEN_EQ
    | TOKEN_ID
    | TOKEN_INT
    | TOKEN_LBRACE
    | TOKEN_MINUS
    | TOKEN_MULT
    | TOKEN_PLUS
    | TOKEN_RBRACE
    | TOKEN_TZ
    | TOKEN_end_of_input
    | TOKEN_error

/// This type is used to give symbolic names to token indexes, useful for error messages.
type private nonterminalId =
    | NONTERM__startcalc
    | NONTERM_atom
    | NONTERM_calc
    | NONTERM_expr
    | NONTERM_multExpression
    | NONTERM_statement
    | NONTERM_statementList

/// Maps tokens to integer indexes.
let private tagOfToken = function
    | DIV _ -> 0
    | EOF _ -> 1
    | EQ _ -> 2
    | ID _ -> 3
    | INT _ -> 4
    | LBRACE _ -> 5
    | MINUS _ -> 6
    | MULT _ -> 7
    | PLUS _ -> 8
    | RBRACE _ -> 9
    | TZ _ -> 10

/// Maps integer indices to symbolic token ids.
let private tokenTagToTokenId = function
    | 0 -> TOKEN_DIV
    | 1 -> TOKEN_EOF
    | 2 -> TOKEN_EQ
    | 3 -> TOKEN_ID
    | 4 -> TOKEN_INT
    | 5 -> TOKEN_LBRACE
    | 6 -> TOKEN_MINUS
    | 7 -> TOKEN_MULT
    | 8 -> TOKEN_PLUS
    | 9 -> TOKEN_RBRACE
    | 10 -> TOKEN_TZ
    | 12 -> TOKEN_end_of_input
    | 11 -> TOKEN_error
    | tokenIdx ->
        failwithf "tokenTagToTokenId: Invalid token. (Tag = %i)" tokenIdx

/// Maps production indexes returned in syntax errors to strings representing
/// the non-terminal that would be produced by that production.
let private prodIdxToNonTerminal = function
    | 0 -> NONTERM__startcalc
    | 1 -> NONTERM_atom
    | 2 -> NONTERM_atom
    | 3 -> NONTERM_atom
    | 4 -> NONTERM_calc
    | 5 -> NONTERM_expr
    | 6 -> NONTERM_expr
    | 7 -> NONTERM_expr
    | 8 -> NONTERM_multExpression
    | 9 -> NONTERM_multExpression
    | 10 -> NONTERM_multExpression
    | 11 -> NONTERM_statement
    | 12 -> NONTERM_statement
    | 13 -> NONTERM_statementList
    | 14 -> NONTERM_statementList
    | prodIdx ->
        failwithf "prodIdxToNonTerminal: Invalid production index. (Index = %i)" prodIdx

let [<Literal>] private _fsyacc_endOfInputTag = 12
let [<Literal>] private _fsyacc_tagOfErrorTerminal = 11

/// Gets the name of a token as a string.
let token_to_string = function
    | DIV _ -> "DIV"
    | EOF _ -> "EOF"
    | EQ _ -> "EQ"
    | ID _ -> "ID"
    | INT _ -> "INT"
    | LBRACE _ -> "LBRACE"
    | MINUS _ -> "MINUS"
    | MULT _ -> "MULT"
    | PLUS _ -> "PLUS"
    | RBRACE _ -> "RBRACE"
    | TZ _ -> "TZ"

/// Gets the data carried by a token as an object.
let private _fsyacc_dataOfToken = function
    | DIV _fsyacc_x -> box _fsyacc_x
    | EOF _fsyacc_x -> box _fsyacc_x
    | EQ _fsyacc_x -> box _fsyacc_x
    | ID _fsyacc_x -> box _fsyacc_x
    | INT _fsyacc_x -> box _fsyacc_x
    | LBRACE _fsyacc_x -> box _fsyacc_x
    | MINUS _fsyacc_x -> box _fsyacc_x
    | MULT _fsyacc_x -> box _fsyacc_x
    | PLUS _fsyacc_x -> box _fsyacc_x
    | RBRACE _fsyacc_x -> box _fsyacc_x
    | TZ _fsyacc_x -> box _fsyacc_x

let private _fsyacc_gotos = [| 0us; 65535us; 23us; 65535us; 0us; 7us; 4us; 16us; 10us; 7us; 13us; 16us; 18us; 35us; 19us; 35us; 20us; 40us; 21us; 41us; 22us; 7us; 27us; 48us; 28us; 48us; 29us; 53us; 30us; 54us; 33us; 16us; 39us; 16us; 46us; 16us; 52us; 16us; 56us; 67us; 57us; 68us; 60us; 74us; 61us; 75us; 66us; 16us; 73us; 16us; 1us; 65535us; 0us; 1us; 11us; 65535us; 0us; 8us; 4us; 14us; 10us; 24us; 13us; 25us; 22us; 8us; 33us; 55us; 39us; 58us; 46us; 59us; 52us; 62us; 66us; 77us; 73us; 78us; 15us; 65535us; 0us; 6us; 4us; 15us; 10us; 6us; 13us; 15us; 18us; 34us; 19us; 36us; 22us; 6us; 27us; 47us; 28us; 49us; 33us; 15us; 39us; 15us; 46us; 15us; 52us; 15us; 66us; 15us; 73us; 15us; 2us; 65535us; 0us; 9us; 22us; 9us; 2us; 65535us; 0us; 5us; 22us; 42us; |]
let private _fsyacc_sparseGotoTableRowOffsets = [| 0us; 1us; 25us; 27us; 39us; 55us; 58us; |]
let private _fsyacc_stateToProdIdxsTableElements = [| 33us; 0us; 1us; 1us; 1us; 1us; 1us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 4us; 7us; 6us; 5us; 10us; 10us; 10us; 9us; 9us; 9us; 8us; 8us; 8us; 11us; 12us; 14us; 13us; 1us; 0us; 6us; 1us; 1us; 1us; 1us; 1us; 12us; 5us; 2us; 2us; 2us; 2us; 2us; 32us; 1us; 1us; 1us; 1us; 1us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 7us; 6us; 5us; 10us; 10us; 10us; 9us; 9us; 9us; 8us; 8us; 8us; 1us; 4us; 3us; 7us; 6us; 5us; 9us; 10us; 10us; 10us; 9us; 9us; 9us; 8us; 8us; 8us; 1us; 11us; 2us; 14us; 13us; 28us; 1us; 1us; 1us; 1us; 1us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 7us; 6us; 5us; 10us; 10us; 10us; 9us; 9us; 9us; 8us; 8us; 8us; 12us; 5us; 1us; 1us; 1us; 1us; 1us; 5us; 2us; 2us; 2us; 2us; 2us; 32us; 1us; 1us; 1us; 1us; 1us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 7us; 6us; 5us; 10us; 10us; 10us; 9us; 9us; 9us; 8us; 8us; 8us; 5us; 3us; 3us; 3us; 3us; 3us; 3us; 7us; 6us; 5us; 9us; 10us; 10us; 10us; 9us; 9us; 9us; 8us; 8us; 8us; 1us; 4us; 13us; 1us; 1us; 1us; 2us; 2us; 2us; 3us; 3us; 3us; 6us; 10us; 9us; 8us; 13us; 1us; 1us; 1us; 2us; 2us; 2us; 3us; 3us; 3us; 5us; 10us; 9us; 8us; 12us; 1us; 1us; 1us; 2us; 2us; 2us; 3us; 3us; 3us; 9us; 9us; 9us; 12us; 1us; 1us; 1us; 2us; 2us; 2us; 3us; 3us; 3us; 8us; 8us; 8us; 33us; 1us; 1us; 1us; 1us; 1us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 7us; 6us; 5us; 10us; 10us; 10us; 9us; 9us; 9us; 8us; 8us; 8us; 11us; 12us; 14us; 14us; 13us; 13us; 5us; 1us; 1us; 1us; 1us; 1us; 1us; 12us; 5us; 3us; 3us; 3us; 3us; 3us; 5us; 3us; 3us; 3us; 3us; 3us; 13us; 1us; 1us; 1us; 2us; 2us; 2us; 3us; 3us; 3us; 6us; 10us; 9us; 8us; 13us; 1us; 1us; 1us; 2us; 2us; 2us; 3us; 3us; 3us; 5us; 10us; 9us; 8us; 12us; 1us; 1us; 1us; 2us; 2us; 2us; 3us; 3us; 3us; 9us; 9us; 9us; 12us; 1us; 1us; 1us; 2us; 2us; 2us; 3us; 3us; 3us; 8us; 8us; 8us; 3us; 1us; 1us; 1us; 3us; 2us; 2us; 2us; 30us; 1us; 1us; 1us; 1us; 1us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 7us; 6us; 5us; 10us; 10us; 10us; 9us; 9us; 9us; 8us; 8us; 8us; 1us; 6us; 3us; 10us; 9us; 8us; 1us; 5us; 3us; 1us; 1us; 1us; 3us; 2us; 2us; 2us; 30us; 1us; 1us; 1us; 1us; 1us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 7us; 6us; 5us; 10us; 10us; 10us; 9us; 9us; 9us; 8us; 8us; 8us; 3us; 9us; 9us; 9us; 3us; 8us; 8us; 8us; 1us; 13us; 5us; 3us; 3us; 3us; 3us; 3us; 3us; 1us; 1us; 1us; 3us; 2us; 2us; 2us; 30us; 1us; 1us; 1us; 1us; 1us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 7us; 6us; 5us; 10us; 10us; 10us; 9us; 9us; 9us; 8us; 8us; 8us; 1us; 6us; 3us; 10us; 9us; 8us; 1us; 5us; 3us; 1us; 1us; 1us; 3us; 2us; 2us; 2us; 30us; 1us; 1us; 1us; 1us; 1us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 7us; 6us; 5us; 10us; 10us; 10us; 9us; 9us; 9us; 8us; 8us; 8us; 3us; 9us; 9us; 9us; 3us; 8us; 8us; 8us; 3us; 3us; 3us; 3us; 4us; 1us; 2us; 3us; 9us; 4us; 1us; 2us; 3us; 8us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 4us; 1us; 2us; 3us; 9us; 4us; 1us; 2us; 3us; 8us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 1us; 1us; 1us; 2us; 28us; 1us; 1us; 1us; 1us; 1us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 7us; 6us; 5us; 10us; 10us; 10us; 9us; 9us; 9us; 8us; 8us; 8us; 1us; 9us; 1us; 8us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 1us; 1us; 1us; 2us; 28us; 1us; 1us; 1us; 1us; 1us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 7us; 6us; 5us; 10us; 10us; 10us; 9us; 9us; 9us; 8us; 8us; 8us; 1us; 9us; 1us; 8us; 3us; 3us; 3us; 3us; 1us; 3us; 1us; 3us; 1us; 3us; 1us; 3us; |]
let private _fsyacc_stateToProdIdxsTableRowOffsets = [| 0us; 34us; 36us; 43us; 49us; 82us; 84us; 88us; 98us; 100us; 103us; 132us; 138us; 144us; 177us; 183us; 187us; 197us; 199us; 213us; 227us; 240us; 253us; 287us; 293us; 295us; 301us; 307us; 321us; 335us; 348us; 361us; 365us; 369us; 400us; 402us; 406us; 408us; 412us; 416us; 447us; 451us; 455us; 457us; 463us; 467us; 471us; 502us; 504us; 508us; 510us; 514us; 518us; 549us; 553us; 557us; 561us; 566us; 571us; 575us; 579us; 584us; 589us; 593us; 597us; 599us; 601us; 630us; 632us; 634us; 638us; 642us; 644us; 646us; 675us; 677us; 679us; 683us; 685us; 687us; 689us; |]
let [<Literal>] private _fsyacc_action_rows = 81
let private _fsyacc_actionTableElements = [| 3us; 32768us; 3us; 2us; 4us; 3us; 5us; 4us; 1us; 32768us; 12us; 49152us; 6us; 32768us; 0us; 16385us; 2us; 10us; 6us; 16385us; 7us; 16385us; 8us; 16385us; 10us; 16385us; 5us; 32768us; 0us; 16386us; 6us; 16386us; 7us; 16386us; 8us; 16386us; 10us; 16386us; 3us; 32768us; 3us; 11us; 4us; 12us; 5us; 13us; 1us; 32768us; 1us; 17us; 3us; 32768us; 6us; 18us; 8us; 19us; 10us; 16391us; 5us; 32768us; 0us; 20us; 6us; 16394us; 7us; 21us; 8us; 16394us; 10us; 16394us; 1us; 32768us; 10us; 16395us; 1us; 32768us; 10us; 22us; 3us; 32768us; 3us; 23us; 4us; 3us; 5us; 4us; 5us; 32768us; 0us; 16385us; 6us; 16385us; 7us; 16385us; 8us; 16385us; 9us; 16385us; 5us; 32768us; 0us; 16386us; 6us; 16386us; 7us; 16386us; 8us; 16386us; 9us; 16386us; 3us; 32768us; 3us; 11us; 4us; 12us; 5us; 13us; 1us; 32768us; 9us; 26us; 3us; 32768us; 6us; 27us; 8us; 28us; 9us; 16391us; 5us; 32768us; 0us; 29us; 6us; 16394us; 7us; 30us; 8us; 16394us; 9us; 16394us; 1us; 32768us; 12us; 16388us; 3us; 32768us; 3us; 31us; 4us; 32us; 5us; 33us; 3us; 32768us; 3us; 31us; 4us; 32us; 5us; 33us; 3us; 32768us; 3us; 37us; 4us; 38us; 5us; 39us; 3us; 32768us; 3us; 37us; 4us; 38us; 5us; 39us; 4us; 32768us; 1us; 16398us; 3us; 2us; 4us; 3us; 5us; 4us; 5us; 32768us; 0us; 16385us; 6us; 16385us; 7us; 16385us; 8us; 16385us; 10us; 16385us; 1us; 32768us; 10us; 16396us; 1us; 32768us; 9us; 43us; 5us; 32768us; 0us; 16387us; 6us; 16387us; 7us; 16387us; 8us; 16387us; 10us; 16387us; 3us; 32768us; 3us; 44us; 4us; 45us; 5us; 46us; 3us; 32768us; 3us; 44us; 4us; 45us; 5us; 46us; 3us; 32768us; 3us; 50us; 4us; 51us; 5us; 52us; 3us; 32768us; 3us; 50us; 4us; 51us; 5us; 52us; 3us; 32768us; 0us; 16385us; 7us; 16385us; 10us; 16385us; 3us; 32768us; 0us; 16386us; 7us; 16386us; 10us; 16386us; 3us; 32768us; 3us; 11us; 4us; 12us; 5us; 13us; 1us; 32768us; 10us; 16390us; 3us; 32768us; 0us; 56us; 7us; 57us; 10us; 16394us; 1us; 32768us; 10us; 16389us; 3us; 32768us; 6us; 16385us; 8us; 16385us; 10us; 16385us; 3us; 32768us; 6us; 16386us; 8us; 16386us; 10us; 16386us; 3us; 32768us; 3us; 11us; 4us; 12us; 5us; 13us; 3us; 32768us; 6us; 16393us; 8us; 16393us; 10us; 16393us; 3us; 32768us; 6us; 16392us; 8us; 16392us; 10us; 16392us; 1us; 32768us; 1us; 16397us; 5us; 32768us; 0us; 16387us; 6us; 16387us; 7us; 16387us; 8us; 16387us; 9us; 16387us; 3us; 32768us; 0us; 16385us; 7us; 16385us; 9us; 16385us; 3us; 32768us; 0us; 16386us; 7us; 16386us; 9us; 16386us; 3us; 32768us; 3us; 11us; 4us; 12us; 5us; 13us; 1us; 32768us; 9us; 16390us; 3us; 32768us; 0us; 60us; 7us; 61us; 9us; 16394us; 1us; 32768us; 9us; 16389us; 3us; 32768us; 6us; 16385us; 8us; 16385us; 9us; 16385us; 3us; 32768us; 6us; 16386us; 8us; 16386us; 9us; 16386us; 3us; 32768us; 3us; 11us; 4us; 12us; 5us; 13us; 3us; 32768us; 6us; 16393us; 8us; 16393us; 9us; 16393us; 3us; 32768us; 6us; 16392us; 8us; 16392us; 9us; 16392us; 1us; 32768us; 9us; 63us; 3us; 32768us; 3us; 64us; 4us; 65us; 5us; 66us; 3us; 32768us; 3us; 64us; 4us; 65us; 5us; 66us; 1us; 32768us; 9us; 69us; 1us; 32768us; 9us; 70us; 3us; 32768us; 3us; 71us; 4us; 72us; 5us; 73us; 3us; 32768us; 3us; 71us; 4us; 72us; 5us; 73us; 1us; 32768us; 9us; 76us; 3us; 32768us; 0us; 16387us; 7us; 16387us; 10us; 16387us; 1us; 32768us; 10us; 16385us; 1us; 32768us; 10us; 16386us; 3us; 32768us; 3us; 11us; 4us; 12us; 5us; 13us; 1us; 32768us; 10us; 16393us; 1us; 32768us; 10us; 16392us; 3us; 32768us; 6us; 16387us; 8us; 16387us; 10us; 16387us; 3us; 32768us; 0us; 16387us; 7us; 16387us; 9us; 16387us; 1us; 32768us; 9us; 16385us; 1us; 32768us; 9us; 16386us; 3us; 32768us; 3us; 11us; 4us; 12us; 5us; 13us; 1us; 32768us; 9us; 16393us; 1us; 32768us; 9us; 16392us; 3us; 32768us; 6us; 16387us; 8us; 16387us; 9us; 16387us; 1us; 32768us; 9us; 79us; 1us; 32768us; 9us; 80us; 1us; 32768us; 10us; 16387us; 1us; 32768us; 9us; 16387us; |]
let private _fsyacc_actionTableRowOffsets = [| 0us; 4us; 6us; 13us; 19us; 23us; 25us; 29us; 35us; 37us; 39us; 43us; 49us; 55us; 59us; 61us; 65us; 71us; 73us; 77us; 81us; 85us; 89us; 94us; 100us; 102us; 104us; 110us; 114us; 118us; 122us; 126us; 130us; 134us; 138us; 140us; 144us; 146us; 150us; 154us; 158us; 162us; 166us; 168us; 174us; 178us; 182us; 186us; 188us; 192us; 194us; 198us; 202us; 206us; 210us; 214us; 216us; 220us; 224us; 226us; 228us; 232us; 236us; 238us; 242us; 244us; 246us; 250us; 252us; 254us; 258us; 262us; 264us; 266us; 270us; 272us; 274us; 278us; 280us; 282us; 284us; |]
let private _fsyacc_reductionSymbolCounts = [| 1us; 1us; 1us; 3us; 2us; 3us; 3us; 1us; 3us; 3us; 1us; 1us; 3us; 3us; 2us; |]
let private _fsyacc_productionToNonTerminalTable = [| 0us; 1us; 1us; 1us; 2us; 3us; 3us; 3us; 4us; 4us; 4us; 5us; 5us; 6us; 6us; |]
let private _fsyacc_immediateActions = [| 65535us; 49152us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16395us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16388us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16396us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16390us; 65535us; 16389us; 65535us; 65535us; 65535us; 65535us; 65535us; 16397us; 65535us; 65535us; 65535us; 65535us; 16390us; 65535us; 16389us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16385us; 16386us; 65535us; 16393us; 16392us; 65535us; 65535us; 16385us; 16386us; 65535us; 16393us; 16392us; 65535us; 65535us; 65535us; 16387us; 16387us; |]
let private _fsyacc_reductions () = [|
    (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
        let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : _)) in
        Microsoft.FSharp.Core.Operators.box
            (
                (
                    raise (Microsoft.FSharp.Text.Parsing.Accept (Microsoft.FSharp.Core.Operators.box _1))
                )
            : '_startcalc))
    (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
        let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
        Microsoft.FSharp.Core.Operators.box
            (
                (
                    _1 
                )
            : 'atom))
    (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
        let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
        Microsoft.FSharp.Core.Operators.box
            (
                (
                    _1 
                )
            : 'atom))
    (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
        let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
        let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
        let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
        Microsoft.FSharp.Core.Operators.box
            (
                (
                    _2 
                )
            : 'atom))
    (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
        let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'statementList)) in
        let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
        Microsoft.FSharp.Core.Operators.box
            (
                (
                    _1 
                )
            : _))
    (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
        let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'multExpression)) in
        let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
        let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'multExpression)) in
        Microsoft.FSharp.Core.Operators.box
            (
                (
                    _1 + _3 
                )
            : 'expr))
    (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
        let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'multExpression)) in
        let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
        let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'multExpression)) in
        Microsoft.FSharp.Core.Operators.box
            (
                (
                    _1 - _3 
                )
            : 'expr))
    (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
        let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'multExpression)) in
        Microsoft.FSharp.Core.Operators.box
            (
                (
                    _1
                )
            : 'expr))
    (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
        let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'atom)) in
        let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
        let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'atom)) in
        Microsoft.FSharp.Core.Operators.box
            (
                (
                    _1 * _3 
                )
            : 'multExpression))
    (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
        let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'atom)) in
        let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
        let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'atom)) in
        Microsoft.FSharp.Core.Operators.box
            (
                (
                    _1 / _3 
                )
            : 'multExpression))
    (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
        let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'atom)) in
        Microsoft.FSharp.Core.Operators.box
            (
                (
                    _1
                )
            : 'multExpression))
    (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
        let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
        Microsoft.FSharp.Core.Operators.box
            (
                (
                    _1 
                )
            : 'statement))
    (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
        let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
        let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
        let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
        Microsoft.FSharp.Core.Operators.box
            (
                (
                    _3 
                )
            : 'statement))
    (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
        let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'statement)) in
        let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
        let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'statementList)) in
        Microsoft.FSharp.Core.Operators.box
            (
                (
                    _1::_3 
                )
            : 'statementList))
    (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
        let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'statement)) in
        let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
        Microsoft.FSharp.Core.Operators.box
            (
                (
                    [_1] 
                )
            : 'statementList))
    |]

let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = {
    reductions = _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken;
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError =
        (fun (ctxt : Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) ->
            match parse_error_rich with
            | Some f -> f ctxt
            | None -> parse_error ctxt.Message);
    numTerminals = 13;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable;
    }
    
let engine lexer lexbuf startState =
    (tables ()).Interpret(lexer, lexbuf, startState)

let calc lexer lexbuf : _ =
    unbox ((tables ()).Interpret(lexer, lexbuf, 0))

