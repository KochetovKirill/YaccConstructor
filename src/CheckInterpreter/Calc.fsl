{
module Lexer

open ParserCalcLALR1
open System
open Microsoft.FSharp.Text.Lexing

let lexeme (lexbuf : LexBuffer<char>) = new System.String(lexbuf.Lexeme)
}

let digit1to9 = ['1'-'9']+
let digit = ['0'-'9']+
let number = digit | digit1to9 digit
let variables = ['a'-'z']

rule tokenize = parse
| '+' { PLUS (0) }
| '-' { MINUS (0) }
| '*' { MULT (0) }
| '/' { DIV (0) }
| '(' { LBRACE (0) }
| ')' { RBRACE (0) }
| '=' { EQ (0) }
| ';' { TZ (0) }
| number { INT (int(lexeme lexbuf)) }
| variables { ID (0) }
| eof { EOF (-1) }
| _ { failwithf "UNEXPEXTED INPUT: %s" <| "-" }
