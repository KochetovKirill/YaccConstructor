{
module YC.RNGLR.ExtendedCalcLexer

open Microsoft.FSharp.Collections
open QuickGraph.FST.GraphBasedFst
open QuickGraph.FSA.GraphBasedFsa
open QuickGraph.FSA.FsaApproximation
open YC.FST.AbstractLexing.Interpreter
open AbstractAnalysis.Common
open Test.ExtendedCalcParser
open System.Collections.Generic
//open YC.SDK.CommonInterfaces
}

let digit = ['0'-'9']
let whitespace = [' ' '\t' '\r' '\n']

rule token = parse
| whitespace { None }
| ['-']? digit+ ('.'digit+)? (['e' 'E'] digit+)? { NUMBER(gr) |> Some }
| '-' { MINUS(gr) |> Some }
| '(' { LBRACE(gr) |> Some }
| ')' { RBRACE(gr) |> Some }
| '/' { DIV(gr) |> Some }
| '+' { PLUS(gr) |> Some }
| '*' { MULT(gr) |> Some }
| '=' { ASSIGN(gr) |> Some }
| ';' { SEMICOLON(gr) |> Some }
| 'x' { X(gr) |> Some }
| 'y' { Y(gr) |> Some }
| 'z' { Z(gr) |> Some }