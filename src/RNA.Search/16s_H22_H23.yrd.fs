module GLLFSA.r16s.H22_H23
#nowarn "64";; // From fsyacc: turn off warnings that type variables used in production annotations are instantiated to concrete type
open Yard.Generators.GLL
open Yard.Generators.GLL.ParserCommon

type Token =
    | A of unit
    | U of unit
    | C of unit
    | G of unit

let tokenToNumber = function
    | A() -> 533
    | U() -> 534
    | C() -> 535
    | G() -> 536

let stateToNontermName = function
    | 533 -> "A"
    | 534 -> "U"
    | 535 -> "C"
    | 536 -> "G"
    | 0 -> "yard_rule_gstem_5"
    | 1 -> "any"
    | 2 -> "yard_rule_stem_4"
    | 3 -> "yard_rule_stem_65"
    | 4 -> "any_1_3"
    | 5 -> "yard_rule_stem_77"
    | 6 -> "h23"
    | 7 -> "s1"
    | 8 -> "s2"
    | 9 -> "h24"
    | 10 -> "h22"
    | 11 -> "s4"
    | 12 -> "s5"
    | 13 -> "yard_rule_stem_49"
    | 14 -> "yard_rule_stem_67"
    | 15 -> "yard_rule_stem_26"
    | 16 -> "yard_rule_stem_74"
    | 17 -> "yard_rule_stem_19"
    | 18 -> "yard_rule_stem_31"
    | 19 -> "yard_rule_stem_71"
    | 20 -> "h5"
    | 21 -> "yard_rule_stem_20"
    | 22 -> "yard_rule_stem_78"
    | 23 -> "yard_rule_stem_57"
    | 24 -> "yard_rule_stem_64"
    | 25 -> "h21"
    | 26 -> "s6"
    | 27 -> "s7"
    | 28 -> "s8"
    | 29 -> "yard_rule_stem_e2_13"
    | 30 -> "yard_rule_stem_e1_14"
    | 31 -> "root"
    | 32 -> "h26"
    | 33 -> "h9"
    | 34 -> "h25"
    | 35 -> "yard_rule_stem_e2_24"
    | 36 -> "yard_rule_stem_e1_25"
    | 37 -> "h27"
    | 38 -> "h19"
    | 39 -> "yard_rule_stem_21"
    | 40 -> "h8"
    | 41 -> "h10"
    | 42 -> "yard_rule_stem_e2_32"
    | 43 -> "yard_rule_stem_38"
    | 44 -> "yard_rule_stem_e1_33"
    | 45 -> "h6"
    | 46 -> "yard_rule_stem_e2_44"
    | 47 -> "yard_rule_stem_e1_45"
    | 48 -> "yard_rule_stem_46"
    | 49 -> "yard_rule_stem_e1_41"
    | 50 -> "yard_rule_stem_42"
    | 51 -> "yard_rule_stem_e2_36"
    | 52 -> "yard_rule_stem_e1_37"
    | 53 -> "h7"
    | 54 -> "yard_rule_stem_e2_50"
    | 55 -> "yard_rule_stem_e1_51"
    | 56 -> "h11"
    | 57 -> "yard_rule_stem_e1_60"
    | 58 -> "yard_rule_stem_e2_55"
    | 59 -> "yard_rule_stem_e1_56"
    | 60 -> "h12"
    | 61 -> "h13"
    | 62 -> "h14"
    | 63 -> "yard_rule_stem_81"
    | 64 -> "h15"
    | 65 -> "yard_rule_stem_e1_68"
    | 66 -> "h16"
    | 67 -> "h17"
    | 68 -> "yard_rule_stem_e2_72"
    | 69 -> "yard_rule_stem_e1_73"
    | 70 -> "h18"
    | 71 -> "h4"
    | 72 -> "yard_rule_stem_e1_80"
    | 73 -> "h3"
    | 74 -> "yard_rule_stem_e1_83"
    | 75 -> "folded"
    | 76 -> "yard_rule_stem_15"
    | 77 -> "any_2_4"
    | 78 -> "yard_rule_stem_7"
    | 79 -> "full"
    | 80 -> "yard_rule_stem_10"
    | 81 -> "yard_rule_stem_17"
    | 82 -> "yard_rule_stem_16"
    | 83 -> "yard_rule_stem_34"
    | 84 -> "yard_rule_stem_28"
    | 85 -> "yard_rule_stem_27"
    | 86 -> "yard_rule_stem_35"
    | 87 -> "yard_rule_stem_48"
    | 88 -> "yard_rule_stem_47"
    | 89 -> "yard_rule_stem_43"
    | 90 -> "yard_rule_stem_40"
    | 91 -> "yard_rule_stem_39"
    | 92 -> "yard_rule_stem_54"
    | 93 -> "yard_rule_stem_53"
    | 94 -> "yard_rule_stem_62"
    | 95 -> "yard_rule_stem_59"
    | 96 -> "yard_rule_stem_58"
    | 97 -> "yard_rule_stem_70"
    | 98 -> "yard_rule_stem_76"
    | 99 -> "yard_rule_stem_75"
    | 100 -> "yard_rule_stem_82"
    | 101 -> "yard_rule_stem_85"
    | 102 -> "yard_rule_stem_23"
    | 103 -> "yard_rule_stem_9"
    | 104 -> "yard_rule_stem_1"
    | 105 -> "yard_rule_stem_2"
    | 106 -> "yard_rule_stem_8"
    | 107 -> "any_2_3"
    | 108 -> "root2"
    | 109 -> "yard_rule_stem_84"
    | 110 -> "any_3_5"
    | 111 -> "yard_rule_stem_63"
    | 112 -> "any_4_6"
    | 113 -> "yard_rule_stem_61"
    | 114 -> "any_6_8"
    | 115 -> "yard_rule_stem_18"
    | 116 -> "yard_rule_stem_79"
    | 117 -> "yard_rule_stem_3"
    | 118 -> "yard_rule_stem_11"
    | 119 -> "yard_rule_stem_12"
    | 120 -> "yard_rule_stem_22"
    | 121 -> "yard_rule_stem_29"
    | 122 -> "yard_rule_stem_30"
    | 123 -> "yard_rule_stem_52"
    | 124 -> "yard_rule_stem_66"
    | 125 -> "yard_rule_stem_69"
    | 126 -> "yard_rule_stem_6"
    | 127 -> "any_1_2"
    | 128 -> "any_5_7"
    | 129 -> "any_4"
    | 130 -> "any_3_4"
    | 131 -> "any_9_11"
    | _ -> ""

let numIsTerminal = function
    | 533 -> true
    | 534 -> true
    | 535 -> true
    | 536 -> true
    | _ -> false

let statesToConvert =
  [|[|533,369;534,173;535,304;536,298;4,149|];
    [|533,132;534,132;536,132;535,132|];
    [|533,370;534,174;535,305;536,237|];
    [|533,413;534,217;535,348;536,280|];
    [|1,431|];
    [|533,424;534,228;535,359;536,291;1,297|];
    [|104,132|];
    [|105,132|];
    [|117,132|];
    [|0,132|];
    [|78,132|];
    [|106,132|];
    [|103,132|];
    [|533,405;534,209;535,340;536,272;127,491|];
    [|533,414;534,218;535,349;536,281;4,489|];
    [|533,387;534,191;535,322;536,254;107,472|];
    [|533,421;534,225;535,356;536,288;77,485|];
    [|533,380;534,184;535,315;536,247;130,482|];
    [|533,391;534,195;535,326;536,258;110,483|];
    [|533,418;534,222;535,353;536,285;128,490|];
    [|128,486|];
    [|533,384;534,188;535,319;536,251;112,132|];
    [|533,423;534,227;535,358;536,290;112,169|];
    [|533,410;534,214;535,345;536,277;114,132|];
    [|533,412;534,216;535,347;536,279;131,132|];
    [|80,132|];
    [|118,132|];
    [|119,132|];
    [|29,132|];
    [|81,132|];
    [|82,132|];
    [|17,132|];
    [|120,132|];
    [|39,132|];
    [|35,132|];
    [|84,132|];
    [|85,132|];
    [|121,132|];
    [|122,132|];
    [|533,383;534,187;535,318;536,250;129,132|];
    [|18,132|];
    [|42,132|];
    [|86,132|];
    [|533,401;534,205;535,336;536,268;44,132|];
    [|83,132|];
    [|46,132|];
    [|87,132|];
    [|88,132|];
    [|533,396;534,200;535,331;536,263;49,132|];
    [|89,132|];
    [|533,398;534,202;535,333;536,265;51,132|];
    [|90,132|];
    [|91,132|];
    [|54,132|];
    [|92,132|];
    [|93,132|];
    [|57,132|];
    [|94,132|];
    [|95,132|];
    [|96,132|];
    [|111,132|];
    [|24,132|];
    [|3,132|];
    [|533,426;534,230;535,361;536,293;20,450|];
    [|65,132|];
    [|97,132|];
    [|19,132|];
    [|68,132|];
    [|98,132|];
    [|99,132|];
    [|116,132|];
    [|72,132|];
    [|100,132|];
    [|74,132|];
    [|101,132|];
    [|108,132|];
    [|533,379;534,183;535,314;536,246;1,429|];
    [|1,4|];
    [|533,371;534,175;535,306;536,238;11,430|];
    [|75,142|];
    [|533,374;534,178;535,309;536,241;1,432;26,142|];
    [|533,377;534,181;535,312;536,244;1,433;30,142|];
    [|533,378;534,182;535,313;536,245;1,434;76,142|];
    [|533,393;534,197;535,328;536,260;1,435;39,142|];
    [|533,385;534,189;535,320;536,252;1,436;36,142|];
    [|533,386;534,190;535,321;536,253;1,437;15,142|];
    [|533,392;534,196;535,327;536,259;1,438;44,142|];
    [|533,394;534,198;535,329;536,261;1,439;47,142|];
    [|533,395;534,199;535,330;536,262;1,440;48,142|];
    [|533,397;534,201;535,332;536,264;1,441;50,142|];
    [|533,399;534,203;535,334;536,266;1,442;52,142|];
    [|533,400;534,204;535,335;536,267;1,443;43,142|];
    [|533,402;534,206;535,337;536,269;1,444;55,142|];
    [|533,403;534,207;535,338;536,270;1,445;123,142|];
    [|533,406;534,210;535,341;536,273;1,446;113,142|];
    [|533,408;534,212;535,343;536,275;1,447;59,142|];
    [|533,409;534,213;535,344;536,276;1,448;23,142|];
    [|533,416;534,220;535,351;536,283;1,451;125,142|];
    [|533,419;534,223;535,354;536,286;1,452;69,142|];
    [|533,420;534,224;535,355;536,287;1,453;16,142|];
    [|533,425;534,229;535,360;536,292;1,454;63,142|];
    [|533,427;534,231;535,362;536,294;1,455;109,142|];
    [|533,388;534,192;535,323;536,255;1,525|];
    [|533,373;534,177;535,308;536,240;6,515|];
    [|533,366;534,170;535,301;536,233;4,144|];
    [|533,367;534,171;535,302;536,234;1,145|];
    [|533,372;534,176;535,307;536,239;4,151|];
    [|1,152|];
    [|38,492|];
    [|533,428;534,232;535,363;536,295;1,471;71,155|];
    [|1,157|];
    [|533,411;534,215;535,346;536,278;1,476;39,157|];
    [|1,160|];
    [|533,407;534,211;535,342;536,274;1,484;58,160|];
    [|1,162|];
    [|533,381;534,185;535,316;536,248;127,165|];
    [|533,422;534,226;535,357;536,289;128,168|];
    [|533,368;534,172;535,303;536,235;1,524|];
    [|533,375;534,179;535,310;536,242;107,481|];
    [|533,376;534,180;535,311;536,243;1,508|];
    [|533,382;534,186;535,317;536,249;127,487|];
    [|533,389;534,193;535,324;536,256;128,483|];
    [|533,390;534,194;535,325;536,257;128,478|];
    [|533,404;534,208;535,339;536,271;77,468|];
    [|533,415;534,219;535,350;536,282;128,507|];
    [|533,417;534,221;535,352;536,284;77,435|];
    [|533,369;534,173;535,304;536,236;4,149|];
    [|1,142|];
    [|1,112|];
    [|1,510|];
    [|1,513|];
    [|1,528|];
    [||];
    [|66,479|];
    [|533,132;536,132|];
    [|535,132;534,132;533,132|];
    [|533,152|];
    [|535,430|];
    [|536,132|];
    [|533,142|];
    [|534,132;536,132|];
    [|534,364|];
    [|1,132|];
    [|1,532|];
    [|7,154|];
    [|1,499;8,527|];
    [|8,527|];
    [|1,516;9,132|];
    [|9,132|];
    [|2,132|];
    [|10,157|];
    [|12,154|];
    [|127,132|];
    [|127,477|];
    [|4,132|];
    [|4,133|];
    [|107,132|];
    [|77,132|];
    [|77,457|];
    [|130,132|];
    [|110,132|];
    [|110,483|];
    [|128,132|];
    [|112,132|];
    [|112,488|];
    [|25,461|];
    [|37,132|];
    [|70,132|];
    [|22,132|];
    [|5,494|];
    [|104,134|];
    [|105,134|];
    [|117,134|];
    [|126,134|];
    [|2,134|];
    [|78,134|];
    [|106,134|];
    [|103,134|];
    [|80,134|];
    [|118,134|];
    [|119,134|];
    [|81,134|];
    [|82,134|];
    [|76,134|];
    [|17,134|];
    [|115,134|];
    [|120,134|];
    [|39,134|];
    [|21,134|];
    [|84,134|];
    [|85,134|];
    [|15,134|];
    [|102,134|];
    [|121,134|];
    [|122,134|];
    [|18,134|];
    [|86,134|];
    [|83,134|];
    [|87,134|];
    [|88,134|];
    [|48,134|];
    [|89,134|];
    [|50,134|];
    [|90,134|];
    [|91,134|];
    [|43,134|];
    [|92,134|];
    [|93,134|];
    [|123,134|];
    [|13,134|];
    [|94,134|];
    [|113,134|];
    [|95,134|];
    [|96,134|];
    [|23,134|];
    [|111,134|];
    [|24,134|];
    [|3,134;533,300|];
    [|14,134|];
    [|124,134|];
    [|97,134|];
    [|125,134|];
    [|19,134|];
    [|98,134|];
    [|99,134|];
    [|16,134|];
    [|116,134|];
    [|22,134|];
    [|5,134|];
    [|100,134|];
    [|63,134|];
    [|101,134|];
    [|109,134|];
    [|104,135|];
    [|105,135|];
    [|117,135|];
    [|126,135|];
    [|2,135;533,299|];
    [|78,135|];
    [|106,135|];
    [|103,135|];
    [|80,135|];
    [|118,135|];
    [|119,135|];
    [|81,135|];
    [|82,135|];
    [|76,135|];
    [|17,135|];
    [|115,135|];
    [|120,135|];
    [|39,135|];
    [|21,135|];
    [|84,135|];
    [|85,135|];
    [|15,135|];
    [|102,135|];
    [|121,135|];
    [|122,135|];
    [|18,135|];
    [|86,135|];
    [|83,135|];
    [|87,135|];
    [|88,135|];
    [|48,135|];
    [|89,135|];
    [|50,135|];
    [|90,135|];
    [|91,135|];
    [|43,135|];
    [|92,135|];
    [|93,135|];
    [|123,135|];
    [|13,135|];
    [|94,135|];
    [|113,135|];
    [|95,135|];
    [|96,135|];
    [|23,135|];
    [|111,135|];
    [|24,135|];
    [|3,135|];
    [|14,135|];
    [|124,135|];
    [|97,135|];
    [|125,135|];
    [|19,135|];
    [|98,135|];
    [|99,135|];
    [|16,135|];
    [|116,135|];
    [|22,135|];
    [|5,135|];
    [|100,135|];
    [|63,135|];
    [|101,135|];
    [|109,135|];
    [|533,136|];
    [|536,137|];
    [|126,1|];
    [|533,138|];
    [|535,138|];
    [|104,138|];
    [|105,138|];
    [|117,138|];
    [|126,138|];
    [|2,138|];
    [|78,138|];
    [|106,138|];
    [|103,138|];
    [|80,138|];
    [|118,138|];
    [|119,138|];
    [|81,138|];
    [|82,138|];
    [|76,138;534,364|];
    [|17,138|];
    [|115,138|];
    [|120,138|];
    [|39,138|];
    [|21,138|];
    [|84,138|];
    [|85,138|];
    [|15,138|];
    [|102,138|];
    [|121,138|];
    [|122,138|];
    [|18,138|];
    [|86,138|];
    [|83,138|];
    [|87,138|];
    [|88,138|];
    [|48,138|];
    [|89,138|];
    [|50,138|];
    [|90,138|];
    [|91,138|];
    [|43,138|];
    [|92,138|];
    [|93,138|];
    [|123,138|];
    [|13,138|];
    [|94,138|];
    [|113,138|];
    [|95,138|];
    [|96,138|];
    [|23,138|];
    [|111,138|];
    [|24,138|];
    [|3,138|];
    [|14,138|];
    [|124,138|];
    [|97,138|];
    [|125,138|];
    [|19,138|];
    [|98,138|];
    [|99,138|];
    [|16,138|];
    [|116,138|];
    [|22,138|];
    [|5,138|];
    [|100,138|];
    [|63,138|];
    [|101,138|];
    [|109,138|];
    [|1,365;533,139|];
    [|533,139|];
    [|104,140|];
    [|105,140|];
    [|117,140|];
    [|126,140|];
    [|2,140|];
    [|78,140|];
    [|106,140|];
    [|103,140|];
    [|80,140|];
    [|118,140|];
    [|119,140|];
    [|81,140|];
    [|82,140|];
    [|76,140|];
    [|17,140|];
    [|115,140|];
    [|120,140|];
    [|39,140|];
    [|21,140|];
    [|84,140|];
    [|85,140|];
    [|15,140|];
    [|102,140|];
    [|121,140|];
    [|122,140|];
    [|18,140|];
    [|86,140|];
    [|83,140|];
    [|87,140|];
    [|88,140|];
    [|48,140|];
    [|89,140|];
    [|50,140|];
    [|90,140|];
    [|91,140|];
    [|43,140|];
    [|92,140|];
    [|93,140|];
    [|123,140|];
    [|13,140|];
    [|94,140|];
    [|113,140|];
    [|95,140|];
    [|96,140|];
    [|23,140|];
    [|111,140|];
    [|24,140|];
    [|3,140|];
    [|14,140|];
    [|124,140|];
    [|97,140|];
    [|125,140|];
    [|19,140|];
    [|98,140|];
    [|99,140|];
    [|16,140|];
    [|116,140|];
    [|22,140|];
    [|5,140|];
    [|100,140|];
    [|63,140|];
    [|101,140|];
    [|109,140|];
    [|535,141|];
    [|1,132|];
    [|1,142|];
    [|26,142|];
    [|30,142|];
    [|76,142|];
    [|39,142|];
    [|36,142|];
    [|15,142|];
    [|44,142|];
    [|47,142|];
    [|48,142|];
    [|50,142|];
    [|52,142|];
    [|43,142|];
    [|55,142|];
    [|123,142|];
    [|113,142|];
    [|59,142|];
    [|23,142|];
    [|60,142|];
    [|64,142|];
    [|125,142|];
    [|69,142|];
    [|16,142|];
    [|63,142|];
    [|109,142|];
    [|1,77|];
    [|34,143|];
    [|1,146;8,527|];
    [|1,147|];
    [|1,148;9,132|];
    [|77,150|];
    [|1,463;32,152|];
    [|1,464;32,152|];
    [|32,152|];
    [|41,152|];
    [|61,153|];
    [|124,505|];
    [|13,154|];
    [|1,470;56,497|];
    [|56,497|];
    [|71,155|];
    [|102,156|];
    [|1,518;28,157|];
    [|1,475;28,157|];
    [|28,157|];
    [|39,157|];
    [|62,157|];
    [|31,158|];
    [|1,480;67,493|];
    [|67,493|];
    [|27,159|];
    [|115,159|];
    [|39,160|];
    [|58,160|];
    [|23,160|];
    [|14,160|];
    [|21,161|];
    [|33,504|];
    [|45,506|];
    [|39,163|];
    [|40,164|];
    [|127,166|];
    [|77,167|];
    [|107,296|];
    [|1,430|];
    [|1,511|];
    [|4,449|];
    [|1,456|];
    [|1,458;8,527|];
    [|1,459|];
    [|1,460;9,132|];
    [|1,503|];
    [|1,462;32,152|];
    [|110,465|];
    [|127,466|];
    [|128,467|];
    [|53,469|];
    [|1,473|];
    [|1,474;28,157|];
    [|1,495|];
    [|1,431|];
    [|1,496|];
    [|1,127|];
    [|1,498|];
    [|1,500|];
    [|1,501;9,132|];
    [|1,502|];
    [|1,509;28,157|];
    [|1,496|];
    [|1,512|];
    [|1,514|];
    [|1,517|];
    [|1,519|];
    [|1,520|];
    [|1,521|];
    [|1,522|];
    [|1,523|];
    [|1,525|];
    [|1,526|];
    [|1,529|];
    [|1,530|];
    [|1,531|] |]

let states =  
    statesToConvert 
    |> Array.Parallel.map (fun x ->  
        x 
        |> Array.map (fun (x,y) -> x, y * 1<state>)) 

let startState = 79 * 1<state>
let isFinalState = function
    | 132 -> true
    | 142 -> true
    | 431 -> true
    | 496 -> true
    | 511 -> true
    | 519 -> true
    | _ -> false

let nontermCount = 132

let firstSet =
  set[|0;1;2;3;
       65536;65537;65539;65538;
       262144;262145;262147;262146;
       131072;131073;131074;131075;
       196608;196609;196610;196611;
       327680;327681;327682;327683;
       6815744;6815745;6815746;6815747;
       393216;393217;393218;393219;
       6881280;6881281;6881282;6881283;
       458752;458753;458754;458755;
       7667712;7667713;7667714;7667715;
       524288;524289;524290;524291;
       589824;589825;589826;589827;
       5111808;5111809;5111810;5111811;
       6946816;6946817;6946818;6946819;
       720896;720897;720898;720899;
       655360;655361;655362;655363;
       6750208;6750209;6750210;6750211;
       786432;786433;786434;786435;
       851968;851969;851970;851971;
       8323072;8323073;8323075;8323074;
       917504;917505;917506;917507;
       983040;983041;983042;983043;
       7012352;7012353;7012355;7012354;
       1048576;1048577;1048578;1048579;
       5046272;5046273;5046275;5046274;
       1114112;1114113;1114114;1114115;
       8519680;8519681;8519683;8519682;
       1179648;1179649;1179650;1179651;
       7208960;7208961;7208963;7208962;
       1245184;1245185;1245186;1245187;
       8388608;8388609;8388611;8388610;
       1310720;1310721;1310723;1310722;
       1376256;1376257;1376258;1376259;
       7340032;7340033;7340035;7340034;
       1441792;1441793;1441794;1441795;
       1507328;1507329;1507330;1507331;
       7471104;7471105;7471107;7471106;
       1572864;1572865;1572866;1572867;
       8585216;8585217;8585219;8585218;
       5242880;5242881;5242882;5242883;
       7733248;7733249;7733250;7733251;
       1703936;1703937;1703938;1703939;
       1638400;1638401;1638402;1638403;
       7798784;7798785;7798786;7798787;
       1769472;1769473;1769474;1769475;
       5308416;5308417;5308418;5308419;
       5373952;5373953;5373954;5373955;
       4980736;4980737;4980738;4980739;
       1966080;1966081;1966082;1966083;
       1900544;1900545;1900546;1900547;
       1835008;1835009;1835010;1835011;
       2031616;2031617;2031618;2031619;
       7864320;7864321;7864322;7864323;
       2097152;2097153;2097154;2097155;
       2555904;2555905;2555906;2555907;
       8454144;8454145;8454147;8454146;
       2162688;2162689;2162690;2162691;
       5505024;5505025;5505026;5505027;
       5570560;5570561;5570562;5570563;
       2359296;2359297;2359298;2359299;
       2293760;2293761;2293762;2293763;
       2228224;2228225;2228226;2228227;
       7929856;7929857;7929858;7929859;
       2424832;2424833;2424834;2424835;
       7995392;7995393;7995394;7995395;
       2490368;2490369;2490370;2490371;
       2621440;2621441;2621442;2621443;
       5636096;5636097;5636098;5636099;
       5439488;5439489;5439490;5439491;
       2883584;2883585;2883586;2883587;
       2752512;2752513;2752514;2752515;
       2686976;2686977;2686978;2686979;
       2818048;2818049;2818050;2818051;
       5701632;5701633;5701634;5701635;
       5767168;5767169;5767170;5767171;
       3145728;3145729;3145730;3145731;
       5832704;5832705;5832706;5832707;
       3276800;3276801;3276802;3276803;
       5898240;5898241;5898242;5898243;
       5963776;5963777;5963778;5963779;
       3407872;3407873;3407874;3407875;
       3342336;3342337;3342338;3342339;
       3211264;3211265;3211266;3211267;
       3080192;3080193;3080194;3080195;
       3014656;3014657;3014658;3014659;
       2949120;2949121;2949122;2949123;
       6029312;6029313;6029314;6029315;
       6094848;6094849;6094850;6094851;
       8060928;8060929;8060930;8060931;
       3604480;3604481;3604482;3604483;
       3538944;3538945;3538946;3538947;
       3473408;3473409;3473410;3473411;
       6160384;6160385;6160386;6160387;
       7405568;7405569;7405570;7405571;
       6225920;6225921;6225922;6225923;
       6291456;6291457;6291458;6291459;
       3866624;3866625;3866626;3866627;
       3801088;3801089;3801090;3801091;
       3735552;3735553;3735554;3735555;
       3670016;3670017;3670018;3670019;
       7274496;7274497;7274498;7274499;
       3932160;3932161;3932162;3932163;
       3997696;3997697;3997698;3997699;
       4063232;4063233;4063234;4063235;
       4128768;4128769;4128770;4128771;
       6356992;6356993;6356994;6356995;
       8192000;8192001;8192002;8192003;
       4259840;4259841;4259842;4259843;
       4194304;4194305;4194306;4194307;
       4325376;4325377;4325378;4325379;
       6422528;6422529;6422530;6422531;
       6488064;6488065;6488066;6488067;
       4521984;4521985;4521986;4521987;
       4456448;4456449;4456450;4456451;
       4390912;4390913;4390914;4390915;
       7602176;7602177;7602178;7602179;
       4587520;4587521;4587522;4587523;
       6553600;6553601;6553602;6553603;
       4718592;4718593;4718594;4718595;
       4653056;4653057;4653058;4653059;
       6619136;6619137;6619138;6619139;
       7143424;7143425;7143426;7143427;
       4849664;4849665;4849666;4849667;
       4784128;4784129;4784130;4784131;
       7077888;7077889;7077890;7077891;
       4915200;4915201;4915202;4915203;
       5177344;5177345;5177346;5177347;
       6684672;6684673;6684674;6684675;
       7536640;7536641;7536642;7536643;
       8126464;8126465;8126466;8126467;
       8257536;8257537;8257538;8257539|]

let private parserSource = new FSAParserSourceGLL (states, startState, isFinalState, nontermCount, numIsTerminal, stateToNontermName, firstSet)
let buildAbstract : (AbstractAnalysis.Common.BioParserInputGraph -> ParserCommon.ParseResult<_>) =
    Yard.Generators.GLL.AbstractParserWithoutTreeFSAInput.buildAbstract parserSource

