{
module Calc.Lexer
open GLL.Parse.SimpleAmb
open Microsoft.FSharp.Text.Lexing
//open AbstractLexer.Core
//open YC.SDK.CommonInterfaces
}

let digit = ['0'-'9']
let whitespace = [' ' '\t' '\r' '\n']

rule token = parse
| whitespace { token lexbuf }
| ['-']? digit+ ('.'digit+)? (['e' 'E'] digit+)? { NUMBER(int (LexBuffer<_>.LexemeString lexbuf))}
| '-' { MINUS(1)}
| '(' { LBRACE(1)}
| ')' { RBRACE(1)}
| '/' { DIV(1)}
| '+' { PLUS(1)}
| "**" { POW(1)}
| '*' { MULT(1)}
| eof { RNGLR_EOF (0)}

